import os
import subprocess
import glob
import logging
import traceback
import io
from collections import defaultdict
from urllib.parse import urlparse

from pyrogram import Client, filters
from pyrogram.enums import ParseMode
from pyrogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    InlineQueryResultArticle, InputTextMessageContent,
    ReplyKeyboardMarkup, KeyboardButton
)

from dotenv import load_dotenv
from yandex_music import Client as YandexClient
from mutagen import File as AudioFile
from PIL import Image
from mutagen.mp4 import MP4, MP4Cover

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

app = Client(
    "music_bot",
    bot_token=BOT_TOKEN,
    api_id=API_ID,
    api_hash=API_HASH
)

DOWNLOAD_DIR = "downloads"
LYRICS_FORMAT = "none"
COVER_RESOLUTION = "original"

os.makedirs(DOWNLOAD_DIR, exist_ok=True)

import json

USER_DATA_FILE = "users.json"

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
                return {int(k): v for k, v in raw.items()}
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å user_data: {e}")
    return {}

def save_user_data():
    try:
        with open(USER_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å user_data: {e}")

user_data_raw = load_user_data()
default_user = {"quality": None, "messages_to_delete": [], "awaiting_cover": False}
user_data = defaultdict(lambda: default_user.copy(), user_data_raw)

def quality_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–õ—É—á—à–µ–µ", callback_data="quality_2"),
        InlineKeyboardButton("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ", callback_data="quality_1"),
        InlineKeyboardButton("–ù–∏–∑–∫–æ–µ", callback_data="quality_0")
    ]])

def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üó£ –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É—á–∞–Ω–∏—è"), KeyboardButton("üîç –ü–æ–∏—Å–∫")],
        [KeyboardButton("üñº –°–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É")]
    ], resize_keyboard=True)

def search_inline_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")
    ]])

async def cleanup_user_messages(client, user_id):
    user = user_data[user_id]
    msg_ids = user.get("messages_to_delete", [])

    if msg_ids:
        try:
            await client.delete_messages(user_id, msg_ids)
        except Exception as e:
            logger.warning(f"Batch delete failed: {e}")
        user["messages_to_delete"] = []

def is_valid_yandex_music_url(url):
    try:
        parsed = urlparse(url)
        return parsed.netloc in ["music.yandex.ru", "music.yandex.com"]
    except:
        return False

def extract_metadata(path):
    try:
        audio = AudioFile(path)
        title = performer = duration = None
        cover_bytes = None

        duration = int(audio.info.length) if audio and audio.info else None

        if isinstance(audio, MP4):
            tags = audio.tags
            title = tags.get('\xa9nam', [None])[0]
            performer = tags.get('\xa9ART', [None])[0]

            # –û–±–ª–æ–∂–∫–∞
            if 'covr' in tags:
                cover_data = tags['covr'][0]
                if isinstance(cover_data, MP4Cover):
                    img_format = 'PNG' if cover_data.imageformat == MP4Cover.FORMAT_PNG else 'JPEG'
                    with io.BytesIO(cover_data) as stream:
                        with Image.open(stream) as img:
                            cover_bytes = io.BytesIO()
                            img.save(cover_bytes, format=img_format)
                            cover_bytes.seek(0)

        elif audio.tags:
            title = audio.tags.get("TIT2", [None])[0]
            performer = audio.tags.get("TPE1", [None])[0]

        return title, performer, duration, cover_bytes

    except Exception as e:
        logger.error(f"Metadata extraction failed: {e}")
        return None, None, None, None

@app.on_message(filters.command("start"))
async def start_command(client, message):
    user_id = message.from_user.id
    user = user_data[user_id]

    await cleanup_user_messages(client, user_id)

    try:
        welcome_msg = await message.reply(
            "<b>üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞!</b>\n\n"
            "<b>üìå –ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É:</b>\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
            "2. –ù–∞–∂–º–∏—Ç–µ <i> 'üîç –ü–æ–∏—Å–∫' </i> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É\n"            
            "3. –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!\n\n",
            reply_markup=main_keyboard()
        )
        quality_msg = await message.reply(
            "<b>–í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É—á–∞–Ω–∏—è</b>\n\n"
            "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ:</i> –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ.",
            reply_markup=quality_keyboard()
        )

        user["messages_to_delete"].extend([welcome_msg.id, quality_msg.id])

    except Exception as e:
        logger.error(f"/start error: {e}")
        traceback.print_exc()


@app.on_message(filters.regex("^üó£ –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É—á–∞–Ω–∏—è$"))
async def settings_command(client, message):
    user_id = message.from_user.id
    user = user_data[user_id]

    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete settings message: {e}")

    try:
        msg = await message.reply(
            "<b>–í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∑–≤—É—á–∞–Ω–∏—è</b>\n\n"
            "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ:</i> –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ.",
            reply_markup=quality_keyboard()
        )
        user["messages_to_delete"].append(msg.id)
    except Exception as e:
        logger.error(f"Settings command error: {e}")
        traceback.print_exc()

@app.on_message(filters.regex("^üñº –°–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É$"))
async def prompt_cover_download(client, message):
    user_id = message.from_user.id
    user = user_data[user_id]

    await message.delete()
    user["awaiting_cover"] = True

    msg = await message.reply(
        "üéØ <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ –æ–±–ª–æ–∂–∫—É (–±–µ–∑ —Ç—Ä–µ–∫–∞).",
        reply_markup=main_keyboard()
    )
    user["messages_to_delete"].append(msg.id)
  
@app.on_message(filters.regex("^üîç –ü–æ–∏—Å–∫$"))
async def search_command(client, message):
    user_id = message.from_user.id
    user = user_data[user_id]

    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"Failed to delete search message: {e}")

    try:
        msg = await message.reply(
            "<b>üîç –ö–∞–∫ –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
            f"<i>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</i> <code>@{app.me.username} –Ω–∞–∑–≤–∞–Ω–∏–µ</code>",
            reply_markup=search_inline_keyboard()
        )
        user["messages_to_delete"].append(msg.id)
    except Exception as e:
        logger.error(f"Search command error: {e}")
        traceback.print_exc()

@app.on_callback_query(filters.regex("^quality_"))
async def handle_quality_choice(client, callback_query):
    user_id = callback_query.from_user.id
    user = user_data[user_id]

    try:
        quality = int(callback_query.data.split("_")[1])
        user["quality"] = quality
        save_user_data()
        quality_names = ["–ù–∏–∑–∫–æ–µ", " –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ", "–õ—É—á—à–µ–µ"]
        save_user_data()

        await cleanup_user_messages(client, user_id)

        msg = await callback_query.message.reply(
            f"<i>–ö–∞—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ –∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</i> <b>{quality_names[quality]}</b>",
            reply_markup=main_keyboard()
        )
        user["messages_to_delete"].append(msg.id)
        await callback_query.answer()

    except Exception as e:
        logger.error(f"Quality choice error: {e}")
        traceback.print_exc()
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@app.on_message(filters.private & filters.text & ~filters.command("start"))
async def handle_message(client, message):
    user_id = message.from_user.id
    user = user_data[user_id]
    text = message.text.strip()

    if text in ["üó£ –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É—á–∞–Ω–∏—è", "üîç –ü–æ–∏—Å–∫", "üñº –°–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É"]:
        return

    if user.get("awaiting_cover"):
        user["awaiting_cover"] = False

        if not is_valid_yandex_music_url(text):
            msg = await message.reply(
                "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏.\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=main_keyboard()
            )
            user["messages_to_delete"].append(msg.id)
            return

        await message.delete()

        status_msg = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é –æ–±–ª–æ–∂–∫—É...", reply_markup=main_keyboard())
        user["messages_to_delete"].append(status_msg.id)

        for file in glob.glob(os.path.join(DOWNLOAD_DIR, "**", "*.*"), recursive=True):
            try:
                os.remove(file)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {file} - {e}")

        result = subprocess.run([
            "yandex-music-downloader",
            "--token", YANDEX_TOKEN,
            "--quality", "0",  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
            "--embed-cover",
            "--cover-resolution", COVER_RESOLUTION,
            "--url", text,
            "--dir", DOWNLOAD_DIR
        ], capture_output=True, text=True)

        if result.returncode != 0:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞:\n<pre>{result.stderr[:4000]}</pre>", parse_mode=ParseMode.HTML)
            return

        audio_files = sorted(
            glob.glob(os.path.join(DOWNLOAD_DIR, "**", "*.*"), recursive=True),
            key=lambda x: os.path.getmtime(x),
            reverse=True
        )

        if not audio_files:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª.")
            return

        audio_path = audio_files[0]
        _, _, _, cover_bytes = extract_metadata(audio_path)

        await status_msg.delete()
        user["messages_to_delete"].remove(status_msg.id)

        if cover_bytes:
            cover_bytes.name = "cover.jpg"
            await message.reply_document(
                document=cover_bytes,
                caption="",
                reply_markup=main_keyboard()
            )
        else:
            await message.reply("‚ùå –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard())
        await cleanup_user_messages(client, user_id)
        try:
            os.remove(audio_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {audio_path} - {e}")
        return

    if user.get("quality") is None:
        warning = await message.reply(
            "‚ö†Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É—á–∞–Ω–∏—è!*\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ¬´üó£ –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É—á–∞–Ω–∏—è¬ª –∏ –∑–∞–¥–∞–π—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –æ—Ç–¥–∞–≤–∞—Ç—å.",
            reply_markup=main_keyboard()
        )
        user["messages_to_delete"].append(warning.id)
        return

    if not is_valid_yandex_music_url(text):
        fallback = await message.reply(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –Ω–∞ —Ç—Ä–µ–∫ –Ø–Ω–¥–µ–∫—Å¬†–ú—É–∑—ã–∫–∏.",
            reply_markup=main_keyboard()
        )
        user["messages_to_delete"].append(fallback.id)
        return

    try:
        await message.delete()
    except Exception:
        pass

    try:
        status_msg = await message.reply(
            "‚è≥ <b>–°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...</b><br>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=main_keyboard()
        )
        user["messages_to_delete"].append(status_msg.id)

        for file in glob.glob(os.path.join(DOWNLOAD_DIR, "**", "*.*"), recursive=True):
            try:
                os.remove(file)
            except Exception as e:
                logger.warning(f"Failed to remove file: {file} - {e}")

        result = subprocess.run([
            "yandex-music-downloader",
            "--token", YANDEX_TOKEN,
            "--quality", str(user["quality"]),
            "--lyrics-format", LYRICS_FORMAT,
            "--embed-cover",
            "--cover-resolution", COVER_RESOLUTION,
            "--url", text,
            "--dir", DOWNLOAD_DIR
        ], capture_output=True, text=True)

        if result.returncode != 0:
            error_text = result.stderr or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"
            logger.error(f"Downloader error: {error_text}")
            await status_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:\n```{error_text[:4000]}```",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        audio_files = sorted(
            glob.glob(os.path.join(DOWNLOAD_DIR, "**", "*.*"), recursive=True),
            key=lambda x: os.path.getmtime(x),
            reverse=True
        )

        if not audio_files:
            await status_msg.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await status_msg.delete()
        user["messages_to_delete"].remove(status_msg.id)

        for audio_path in audio_files:
            title, performer, duration, thumb = extract_metadata(audio_path)

            await message.reply_audio(
                audio_path,
                title=title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                performer=performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                duration=duration,
                thumb=thumb,
                reply_markup=main_keyboard()
            )

            try:
                os.remove(audio_path)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {audio_path} - {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        traceback.print_exc()
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞:\n`{str(e)[:4000]}`",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=main_keyboard()
        )

@app.on_inline_query()
async def inline_search_handler(client, inline_query):
    query = inline_query.query.strip()
    results = []

    if not query:
        await inline_query.answer([], cache_time=1)
        return

    try:
        yandex = YandexClient(YANDEX_TOKEN)
        yandex.init()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YandexClient: {e}")
        await inline_query.answer([], cache_time=1)
        return

    try:
        search_result = yandex.search(query)
        tracks = search_result.tracks.results[:10] if search_result.tracks else []

        for track in tracks:
            title = f"{track.title} ‚Äî {', '.join(artist.name for artist in track.artists)}"
            url = f"https://music.yandex.ru/track/{track.id}"

            results.append(
                InlineQueryResultArticle(
                    title=title,
                    description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    input_message_content=InputTextMessageContent(url),
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ", url=url)
                    ]])
                )
            )

        await inline_query.answer(results, cache_time=1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
        await inline_query.answer([], cache_time=1)


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run()

